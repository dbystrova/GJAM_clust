Colnames_Y$species<- as.character(Colnames_Y$species)
Colnames_Y$species<- strtrim(Colnames_Y$species, 20)
MDP= fit_gjam$parameters$corMu
rownames(MDP)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
colnames(MDP)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
corrplot(MDP, diag = FALSE, order = "original",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP model (original)", mar=c(0,0,1,0))
corrplot(MDP, diag = FALSE, order = "hclust",tl.pos = "ld", tl.cex = 0.45,tl.srt=45,
method = "color",col=cols(200), type = "lower",title= "Correlation for the DP model (hclust)", mar=c(0,0,1,0))
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(MDP, diag = FALSE, order = "original",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP model (original)", mar=c(0,0,1,0))
corrplot(MDP, diag = FALSE, order = "hclust",tl.pos = "ld", tl.cex = 0.45,tl.srt=45,
method = "color",col=cols(200), type = "lower",title= "Correlation for the DP model (hclust)", mar=c(0,0,1,0))
MDP2= fit_gjamDP2$parameters$corMu
rownames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
colnames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
corrplot(MDP2, diag = FALSE, order = "original",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (original)", mar=c(0,0,1,0))
corrplot(MDP2, diag = FALSE, order = "hclust",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (hclust)", mar=c(0,0,1,0))
?corrplot
Colnames_Y[order(Colnames_Y$CN),3]
Colnames_Y[order(Colnames_Y$CN),2]
Colnames_Y[order(Colnames_Y$CN),1]
Colnames_Y[order(Colnames_Y$CN),4]
head(Species_names_groups_num)
Colnames_Y<- merge(Colnames_Y,Species_names_groups_num [,c(2,3,5)], by ="CODE_CBNA" )
Colnames_Y$species<- as.character(Colnames_Y$species)
Colnames_Y$species<- strtrim(Colnames_Y$species, 20)
Colnames_Y<- tibble(CN = 1:112, CODE_CBNA=colnames(Ydata))
Colnames_Y<- merge(Colnames_Y,Species_names_groups_num [,c(2,3,5)], by ="CODE_CBNA" )
Colnames_Y$species<- as.character(Colnames_Y$species)
Colnames_Y$species<- strtrim(Colnames_Y$species, 20)
head(Colnames_Y)
Colnames_Y[order(Colnames_Y$CN),4]
viridis(16)
colors_virisds=viridis(16)
colors_virisds[1]
Colnames_Y[order(Colnames_Y$CN),3]
Colnames_Y[order(Colnames_Y$CN),4]
sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_viridis(x))
colors_vir=viridis(16)
sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_vir(x))
colors_vir=viridis(16)
sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_vir[x])
colors_vir=viridis(16)
LabelCol = sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_vir[x])
corrplot(cor(iris[,1:4]), type="upper",  tl.col=LabelCol)
MDP2= fit_gjamDP2$parameters$corMu
rownames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
colnames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
corrplot(MDP2, diag = FALSE, order = "original",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, tl.col=LabelCol, method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (original)", mar=c(0,0,1,0))
MDP2= fit_gjamDP2$parameters$corMu
rownames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
colnames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
corrplot(MDP2, diag = FALSE, order = "original",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, tl.col=LabelCol, method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (original)", mar=c(0,0,1,0))
corrplot(MDP2, diag = FALSE, order = "hclust",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, tl.col=LabelCol,method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (hclust)", mar=c(0,0,1,0))
#pdf(file = "Correlation_matrix_DP2.pdf", width= 8.27, height = 9.69)
colors_vir=viridis(16, option = "magma")
LabelCol = sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_vir[x])
corrplot(cor(iris[,1:4]), type="upper",  tl.col=LabelCol)
corrplot(MDP2, diag = FALSE, order = "hclust",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, tl.col=LabelCol,method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (hclust)", mar=c(0,0,1,0))
rm(list=ls())
library(repmis)
library(gjam)
library(MASS)
library(truncnorm)
library(coda)
library(RcppArmadillo)
library(arm)
library(Rcpp)
library(ggplot2)
library(AUC)
library(formattable)
library(mcclust.ext)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(grid)
library(factoextra)
library(Hmsc)
library(knitr)
library(tidyverse)
library(corrplot)
library(rootSolve)
library(FactoMineR)
library(ggsci)
library(rust)
library(gtools)
Rcpp::sourceCpp('src/cppFns.cpp')
Rcpp::sourceCpp('src/user_fns.cpp')
source("R/gjamHfunctions.R")
source("R/gjam.R")
source("BNP_functions.R")
source("rlaptrans.r")
load_object <- function(file) {
tmp <- new.env()
load(file = file, envir = tmp)
tmp[[ls(tmp)[1]]]
}
##### PCA data
set.seed(123)
PA_pdata<- load_object("Bauges_dataset/PA_data_clean_PCA.RData")
train_ind <- load_object( "Bauges_dataset/PCAtrain_ind.Rds")
setwd("~/Documents/GitHub/GJAM_clust")
rm(list=ls())
library(repmis)
library(gjam)
library(MASS)
library(truncnorm)
library(coda)
library(RcppArmadillo)
library(arm)
library(Rcpp)
library(ggplot2)
library(AUC)
library(formattable)
library(mcclust.ext)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(grid)
library(factoextra)
library(Hmsc)
library(knitr)
library(tidyverse)
library(corrplot)
library(rootSolve)
library(FactoMineR)
library(ggsci)
library(rust)
library(gtools)
Rcpp::sourceCpp('src/cppFns.cpp')
Rcpp::sourceCpp('src/user_fns.cpp')
source("R/gjamHfunctions.R")
source("R/gjam.R")
source("BNP_functions.R")
source("rlaptrans.r")
load_object <- function(file) {
tmp <- new.env()
load(file = file, envir = tmp)
tmp[[ls(tmp)[1]]]
}
##### PCA data
set.seed(123)
PA_pdata<- load_object("Bauges_dataset/PA_data_clean_PCA.RData")
train_ind <- load_object( "Bauges_dataset/PCAtrain_ind.Rds")
y<- PA_pdata[,7:(ncol(PA_pdata)-2)]
Ydata<- gjamTrimY(y,20)$y
xdata_train <- PA_pdata[train_ind, (ncol(PA_pdata)-1):(ncol(PA_pdata))]
xdata_test <- PA_pdata[-train_ind, (ncol(PA_pdata)-1):(ncol(PA_pdata))]
Ydata_train<- Ydata[train_ind,]
Ydata_test<- Ydata[-train_ind,]
S<- ncol(Ydata_train)
S_prev <- colSums(Ydata, na.rm = TRUE, dims = 1)
p_w<- S_prev[1:(length(S_prev))]/sum(S_prev[1:(length(S_prev))])
formula <- as.formula( ~   PC1  + PC2 + I(PC1^2) + I(PC2^2))
iterations=1000
burn_period=500
K_prior=16
r_reduct = 5
folderpath="PCA_analysis/r5/"
##conditional prediction
columns<-1:ncol(Ydata_train)
ycs<- sample(columns, 10)
y_c_p <-columns[ !columns %in% ycs]
rl <- list(r =r_reduct, N = S)
ml   <- list(ng = iterations, burnin = burn_period, typeNames = 'PA', reductList = rl,PREDICTX = F)
fit_gjam<-gjam(formula, xdata = xdata_train, ydata = Ydata_train, modelList = ml)
#save(fit_gjam, file = paste0(folderpath,"fit_gjam.Rdata"))
##################################################################################################
rl1 <- list(r = r_reduct, N = S,DRtype="1", K=K_prior) #prior is Number of plant functional groups
ml1   <- list(ng = iterations, burnin = burn_period, typeNames = 'PA', reductList = rl1,PREDICTX = F) #change ml
fit_gjamDP1<-gjam(formula, xdata = xdata_train, ydata = Ydata_train, modelList = ml1)
rl1 <- list(r = r_reduct, N = S,DRtype="1", K=K_prior) #prior is Number of plant functional groups
ml1   <- list(ng = iterations, burnin = burn_period, typeNames = 'PA', reductList = rl1,PREDICTX = F) #change ml
fit_gjamDP1<-gjam(formula, xdata = xdata_train, ydata = Ydata_train, modelList = ml1)
PY_prior<- function(k,H, n, alpha, sigma, Cnk_mat){
n_vec<- 0:(n-2)
fal_fact <- prod(alpha +1 +n_vec)
coef = exp(log(factorial(H)) -  log(factorial(H - k)) - log(fal_fact))
sum<- 0
for (l in (k:n)){
if (k==l){
val0 = exp( lgamma(alpha/sigma +l ) - lgamma(alpha/sigma + 1) - l*log(H)  + Cnk_mat[n,l])
}
else{
val0 = exp( lgamma(alpha/sigma +l ) - lgamma(alpha/sigma + 1) - l*log(H) + Strlng2(l, k, log = TRUE) + Cnk_mat[n,l])
}
sum<- sum + val0
}
x_vec<- 1:H
pks = (coef*sum)/sigm
E_p = sum(x_vec*pks)
V_p = ((x_vec - E_p)^2)*pks
return(list(p_v = pks, exp= E_p, var= V_p))
}
x_vec<- 1:112
load("IJulia_part/Cnk_mat_112_025.Rdata")
load("Cnk_mat_112.Rdata")
Cnk_mat_112
M2
Cnk_112_112[1,1]
Cnk_112_112_05[1,1]
Cnk_112_112_025[1,1]
Cnk_112_112_025[10,19]
Cnk_112_112_025[10,19]
Cnk_112_112_025[10,9]
Cnk_112_112[10,9]
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=0.88, sigma=0.25,Cnk_mat=Cnk_112_112_025)
library(CryptRndTest)
PY_prior(2,H=112, n=112, alpha=0.88, sigma=0.25,Cnk_mat=Cnk_112_112_025)
PY_prior(2,H=112, n=112, alpha=0.88, sigma=0.25,Cnk_mat=Cnk_112_112_025)
PY_prior<- function(k,H, n, alpha, sigma, Cnk_mat){
n_vec<- 0:(n-2)
fal_fact <- prod(alpha +1 +n_vec)
coef = exp(log(factorial(H)) -  log(factorial(H - k)) - log(fal_fact))
sum<- 0
for (l in (k:n)){
if (k==l){
val0 = exp( lgamma(alpha/sigma +l ) - lgamma(alpha/sigma + 1) - l*log(H)  + Cnk_mat[n,l])
}
else{
val0 = exp( lgamma(alpha/sigma +l ) - lgamma(alpha/sigma + 1) - l*log(H) + Strlng2(l, k, log = TRUE) + Cnk_mat[n,l])
}
sum<- sum + val0
}
return(coef*sum)/sigma)
}
PY_prior<- function(k,H, n, alpha, sigma, Cnk_mat){
n_vec<- 0:(n-2)
fal_fact <- prod(alpha +1 +n_vec)
coef = exp(log(factorial(H)) -  log(factorial(H - k)) - log(fal_fact))
sum<- 0
for (l in (k:n)){
if (k==l){
val0 = exp( lgamma(alpha/sigma +l ) - lgamma(alpha/sigma + 1) - l*log(H)  + Cnk_mat[n,l])
}
else{
val0 = exp( lgamma(alpha/sigma +l ) - lgamma(alpha/sigma + 1) - l*log(H) + Strlng2(l, k, log = TRUE) + Cnk_mat[n,l])
}
sum<- sum + val0
}
return( (coef*sum)/sigma)
}
PY_prior(2,H=112, n=112, alpha=0.88, sigma=0.25,Cnk_mat=Cnk_112_112_025)
x_vec<- 1:112
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=0.88, sigma=0.25,Cnk_mat=Cnk_112_112_025)
plot(x_vec, pks)
sum(pks*x_vec)
x_vec<- 1:112
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=0.88, sigma=0.25,Cnk_mat=Cnk_112_112_025)
plot(x_vec, pks)
sum(pks*x_vec)
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=2, sigma=0.25,Cnk_mat=Cnk_112_112_025)
plot(x_vec, pks)
sum(pks*x_vec)
PY_prior<- function(k,H, n, alpha, sigma, Cnk_mat){
n_vec<- 0:(n-2)
fal_fact <- prod(alpha +1 +n_vec)
coef = exp(log(factorial(H)) -  log(factorial(H - k)) - log(fal_fact))
sum<- 0
for (l in (k:n)){
if (k==l){
val0 = exp( lgamma(alpha/sigma +l ) - lgamma(alpha/sigma + 1) - l*log(H)  + Cnk_mat[n,l])
}
else{
val0 = exp( lgamma(alpha/sigma +l ) - lgamma(alpha/sigma + 1) - l*log(H) + Strlng2(l, k, log = TRUE) + Cnk_mat[n,l])
}
sum<- sum + val0
}
return( (coef*sum)/sigma)
}
load("IJulia_part/Cnk_mat_112_H025.Rdata")
Cnk_mat_112_H025[1,1]
Cnk_mat_112_H025
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=2, sigma=0.25,Cnk_mat=Cnk_112_112_H025)
x_vec<- 1:112
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=2, sigma=0.25,Cnk_mat=Cnk_112_112_H025)
plot(x_vec, pks)
sum(pks*x_vec)
Exp <- sum(pks*x_vec)
Var<- ((x_vec- Exp)^2)*pks
Exp
Var
Var<- sum(((x_vec- Exp)^2)*pks)
Var
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=10, sigma=0.25,Cnk_mat=Cnk_112_112_H025)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
Var<- sum(((x_vec- Exp)^2)*pks)
Var
compute_alpha_PYM<- function(n, H, sigma, Mat_prior){
x_vec<- 1:H
pks<- sapply(x_vec, PY_prior,H=H, n=n, alpha=alpha, sigma=sgma,Cnk_mat=Mat_prior)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
Var<- sum(((x_vec- Exp)^2)*pks)
return(list(E= Exp, V=Var ))
}
compute_alpha_PYM(H=112, n=112, alpha=10, sigma=0.25,Mat_prior=Cnk_112_112_H025)
compute_alpha_PYM<- function(H,n,alpha,sigma, Mat_prior){
x_vec<- 1:H
pks<- sapply(x_vec, PY_prior,H=H, n=n, alpha=alpha, sigma=sgma,Cnk_mat=Mat_prior)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
Var<- sum(((x_vec- Exp)^2)*pks)
return(list(E= Exp, V=Var ))
}
compute_alpha_PYM(H=112, n=112, alpha=10, sigma=0.25,Mat_prior=Cnk_112_112_H025)
compute_alpha_PYM<- function(H,n,alpha,sigma, Mat_prior){
x_vec<- 1:H
pks<- sapply(x_vec, PY_prior,H=H, n=n, alpha=alpha, sigma=sigma,Cnk_mat=Mat_prior)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
Var<- sum(((x_vec- Exp)^2)*pks)
return(list(E= Exp, V=Var ))
}
P = compute_alpha_PYM(H=112, n=112, alpha=10, sigma=0.25,Mat_prior=Cnk_112_112_H025)
P$E
P$V
x<- seq(0.000001,300,0.1)
exp_var_PYM<- function(alpha,sigma,H=H, n=n, Mat_prior){
x_vec<- 1:H
pks<- sapply(x_vec, PY_prior,H=H, n=n, alpha=alpha, sigma=sigma,Cnk_mat=Mat_prior)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
Var<- sum(((x_vec- Exp)^2)*pks)
return(list(E= Exp, V=Var ))
}
P = compute_alpha_PYM(alpha=10, sigma=0.25,H=112, n=112,Mat_prior=Cnk_112_112_H025)
exp_var_PYM<- function(alpha,sigma,H=H, n=n, Mat_prior){
x_vec<- 1:H
pks<- sapply(x_vec, PY_prior,H=H, n=n, alpha=alpha, sigma=sigma,Cnk_mat=Mat_prior)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
Var<- sum(((x_vec- Exp)^2)*pks)
return(list(E= Exp, V=Var ))
}
P = exp_var_PYM(alpha=10, sigma=0.25,H=112, n=112,Mat_prior=Cnk_112_112_H025)
H=112
n=112
sigma=0.25
Mat_prior= Cnk_112_112_H025
x<- seq(0.000001,300,0.1)
x<- seq(0.001,300,1)
y=sapply(x, function(x) exp_var_PYM(x, sigma=sigma,H=H, n=n,Mat_prior=Mat_prior)$E) - K
K=16
x<- seq(0.001,300,5)
y=sapply(x, function(x) exp_var_PYM(x, sigma=sigma,H=H, n=n,Mat_prior=Mat_prior)$E) - K
f_spline_smooth=smooth.spline(x, y)
plot(x,y)
f_spline_smooth=smooth.spline(x, y)
roots <- newton2(f = function(x) predict(f_spline_smooth, x,deriv = 0)$y ,f_der=  function(x) predict(f_spline_smooth, x,deriv = 1)$y,x0=1,N=50)
roots[length(roots)]
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=3,22, sigma=0.25,Cnk_mat=Cnk_112_112_H025)
x_vec<- 1:112
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=3.22, sigma=0.25,Cnk_mat=Cnk_112_112_H025)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
Exp
x_vec<- 1:112
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=3.228578, sigma=0.25,Cnk_mat=Cnk_112_112_H025)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
Exp
compute_alpha_PYM<- function(H,n,sigma, Mat_prior, K){
x<- seq(0.001,300,1)
y=sapply(x, function(x) exp_var_PYM(x, sigma=sigma,H=H, n=n,Mat_prior=Mat_prior)$E) - K
f_spline_smooth=smooth.spline(x, y)
roots <- newton2(f = function(x) predict(f_spline_smooth, x,deriv = 0)$y ,f_der=  function(x) predict(f_spline_smooth, x,deriv = 1)$y,x0=1,N=50)
#root<-  uniroot(function(x) predict(f_spline_smooth, x, deriv = 0)$y - 0, interval = c(0, 100))$root
#print(roots)
return(roots[length(roots)])
}
compute_alpha_PYM(H=112,n=112,sigma=0.25,Mat_prior= Cnk_112_112_H025, K=16)
x_vec<- 1:112
pks<- sapply(x_vec, PY_prior,H=112, n=112, alpha=2.577792, sigma=0.25,Cnk_mat=Cnk_112_112_H025)
plot(x_vec, pks)
Exp <- sum(pks*x_vec)
Exp
par = compute_alpha_PYM(H=112,n=112,sigma=0.25,Mat_prior= Cnk_112_112_H025, K=16)
par
source('~/Documents/GitHub/GJAM_clust/BNP_functions.R')
par = compute_alpha_PYM(H=112,n=112,sigma=0.25,Mat_prior= Cnk_112_112_H025, K=16)
par
rl2   <- list(r = r_reduct, DRtype="2" ,N=112, alpha_py=par,sigma_py=0.25,K=K_prior, Precomp_mat=Cnk_112_112_025)
ml2   <- list(ng = iterations, burnin = burn_period, typeNames = 'PA', reductList = rl2,PREDICTX = F)
fit_gjamPY1<-gjam(formula, xdata = xdata_train, ydata = Ydata_train, modelList = ml2)
rl3   <- list(r = r_reduct, DRtype="3" ,sigma_py=0.25,K=K_prior)
ml3   <- list(ng = iterations, burnin = burn_period, typeNames = 'PA', reductList = rl3,PREDICTX = F)
fit_gjamPY2<-gjam(formula, xdata = xdata_train, ydata = Ydata_train, modelList = ml3)
tibble(it= 1: length(apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x)))),
DP= apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x))),
DP2 =apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))),
PY1=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x))),
PY2=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))
) %>%
gather(Model, trace, DP:PY2)%>%
ggplot(aes(x=it,y=trace,col=Model))+geom_line(alpha=0.8)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
library(viridis)
tibble(it= 1: length(apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x)))),
DP= apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x))),
DP2 =apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))),
PY1=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x))),
PY2=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))
) %>%
gather(Model, trace, DP:PY2)%>%
ggplot(aes(x=it,y=trace,col=Model))+geom_line(alpha=0.8)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
tibble(it= 1: length(apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x)))),
DP= apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x))),
DP2 =apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))),
PY1=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))
# PY2=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x))
)
) %>%
gather(Model, trace, DP:PY2)%>%
ggplot(aes(x=it,y=trace,col=Model))+geom_line(alpha=0.8)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
tibble(it= 1: length(apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x)))),
DP= apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x))),
DP2 =apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))),
PY1=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))
# PY2=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x))
)
) %>%
gather(Model, trace, DP:PY1)%>%
ggplot(aes(x=it,y=trace,col=Model))+geom_line(alpha=0.8)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
tibble(it= 1: length(apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x)))),
DP= apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x))),
DP2 =apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))),
PY1=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))
# PY2=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x))
) %>%
gather(Model, trace, DP:PY1)%>%
ggplot(aes(x=it,y=trace,col=Model))+geom_line(alpha=0.8)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
tibble(it= 1: length(apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x)))),
DP= apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x))),
DP2 =apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))),
PY1=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x))),
PY2=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x))
) %>%
gather(Model, trace, DP:PY2)%>%
ggplot(aes(x=it,y=trace,col=Model))+geom_line(alpha=0.8)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
))]
tibble(it= 1: length(apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x)))),
DP= apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x))),
DP2 =apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))),
PY1=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x))),
PY2=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))
) %>%
gather(Model, trace, DP:PY2)%>%
ggplot(aes(x=it,y=trace,col=Model))+geom_line(alpha=0.8)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
tibble(it= 1: length(apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x)))),
DP= apply(fit_gjam$chains$kgibbs,1,function(x) length(unique(x))),
DP2 =apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))),
PY1=apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x))),
PY2=apply(fit_gjamPY2$chains$kgibbs,1,function(x) length(unique(x)))
) %>%
gather(Model, trace, DP:PY2)%>%
ggplot(aes(x=it,y=trace,col=Model))+geom_line(alpha=0.8)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
