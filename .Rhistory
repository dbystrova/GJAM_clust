Colnames_Y$species<- as.character(Colnames_Y$species)
Colnames_Y$species<- strtrim(Colnames_Y$species, 20)
head(Colnames_Y)
Colnames_Y[order(Colnames_Y$CN),4]
viridis(16)
colors_virisds=viridis(16)
colors_virisds[1]
Colnames_Y[order(Colnames_Y$CN),3]
Colnames_Y[order(Colnames_Y$CN),4]
sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_viridis(x))
colors_vir=viridis(16)
sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_vir(x))
colors_vir=viridis(16)
sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_vir[x])
colors_vir=viridis(16)
LabelCol = sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_vir[x])
corrplot(cor(iris[,1:4]), type="upper",  tl.col=LabelCol)
MDP2= fit_gjamDP2$parameters$corMu
rownames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
colnames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
corrplot(MDP2, diag = FALSE, order = "original",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, tl.col=LabelCol, method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (original)", mar=c(0,0,1,0))
MDP2= fit_gjamDP2$parameters$corMu
rownames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
colnames(MDP2)=c(Colnames_Y[order(Colnames_Y$CN),3],"other")
corrplot(MDP2, diag = FALSE, order = "original",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, tl.col=LabelCol, method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (original)", mar=c(0,0,1,0))
corrplot(MDP2, diag = FALSE, order = "hclust",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, tl.col=LabelCol,method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (hclust)", mar=c(0,0,1,0))
#pdf(file = "Correlation_matrix_DP2.pdf", width= 8.27, height = 9.69)
colors_vir=viridis(16, option = "magma")
LabelCol = sapply(Colnames_Y[order(Colnames_Y$CN),4], function(x) colors_vir[x])
corrplot(cor(iris[,1:4]), type="upper",  tl.col=LabelCol)
corrplot(MDP2, diag = FALSE, order = "hclust",tl.pos = "ld", tl.cex = 0.45,tl.srt=45, tl.col=LabelCol,method = "color",col=cols(200),
type = "lower", title= "Correlation for the DP2 model (hclust)", mar=c(0,0,1,0))
rm(list=ls())
setwd("~/Documents/GitHub/GJAM_clust")
library(repmis)
library(gjam)
library(MASS)
library(truncnorm)
library(coda)
library(RcppArmadillo)
library(arm)
library(Rcpp)
library(ggplot2)
library(AUC)
library(rlist)
library(formattable)
library(mcclust.ext)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(grid)
library(factoextra)
library(Hmsc)
library(knitr)
library(tidyverse)
library(corrplot)
library(latex2exp)
library(cowplot)
library(rootSolve)
library(FactoMineR)
library(ggsci)
library(viridis)
library(rlist)
library(latex2exp)
library(GreedyEPL)
Rcpp::sourceCpp('src/cppFns.cpp')
source("R/gjamHfunctions.R")
source("R/gjam.R")
source("BNP_functions.R")
source('analysis_functions.R')
load_object <- function(file) {
tmp <- new.env()
load(file = file, envir = tmp)
tmp[[ls(tmp)[1]]]
}
##### PCA data
set.seed(123)
PA_pdata<- load_object("Bauges_dataset/PA_data_clean_PCA.RData")
#Bauges_plant<- cbind(PA_pdata$PC1,PA_pdata$PC2, PA_pdata[,7:(ncol(PA_pdata)-2)])
#names(Bauges_plant) = c("PC1", "PC2", names(PA_pdata[,7:(ncol(PA_pdata)-2)]))
#save(Bauges_plant, file = "Bauges_plant.Rdata")
train_ind <- load_object( "Bauges_dataset/PCAtrain_ind.Rds")
y<- PA_pdata[,7:(ncol(PA_pdata)-2)]
Ydata<- gjamTrimY(y,20)$y
xdata_train <- PA_pdata[train_ind, (ncol(PA_pdata)-1):(ncol(PA_pdata))]
xdata_test <- PA_pdata[-train_ind, (ncol(PA_pdata)-1):(ncol(PA_pdata))]
Ydata_train<- Ydata[train_ind,]
Ydata_test<- Ydata[-train_ind,]
S<- ncol(Ydata_train)
S_prev <- colSums(Ydata, na.rm = TRUE, dims = 1)
p_w<- S_prev[1:(length(S_prev))]/sum(S_prev[1:(length(S_prev))])
Colnames_Y<- tibble(CN = 1:112, CODE_CBNA=colnames(Ydata))
formula <- as.formula( ~   PC1  + PC2 + I(PC1^2) + I(PC2^2))
K_prior=16
r_reduct = 5
folderpath="PCA_analysis/r5/"
folderpath2="PCA_analysis/r5_2/"
folderpath3="PCA_analysis/r5_3/"
folderpath4="PCA_analysis/r5_4/"
folderpath5="PCA_analysis/r5_5/"
folderpath6="PCA_analysis/r5_6/"
##################################Species names and Functional groups #####################################
#Preparing species functional groups
Species_names_groups<- read.csv("Bauges/PFG_Bauges_Description_2017.csv", sep="\t")
true_names<- as.data.frame(names(table(Species_names_groups$PFG)))
names(true_names)<- c("PFG")
true_names$K_n<- 1:16
Species_names_groups_num<- merge(Species_names_groups,true_names, by="PFG" )
#Species_names_groups_num
True_clustering<- tibble( CODE_CBNA =  colnames(Ydata)[1: (ncol(Ydata))])
True_clust<- merge(Species_names_groups_num,True_clustering, by="CODE_CBNA")
Colnames_Y<- merge(Colnames_Y,Species_names_groups_num [,c(2,3,5)], by ="CODE_CBNA" )
Colnames_Y$species<- as.character(Colnames_Y$species)
Colnames_Y$species<- strtrim(Colnames_Y$species, 20)
## Load models 1st run
fit_gjamPY1<- load_object(paste0(folderpath3,"fit_gjamPY1.Rdata"))
## Load models 2nd run
fit_gjamPY1_2<- load_object(paste0(folderpath4,"fit_gjamPY1.Rdata"))
### Two chains combined
fit_PY_comb =fit_gjamPY1
fit_PY_comb$modelList$ng=fit_PY_comb$modelList$ng + (fit_PY_comb$modelList$ng - fit_PY_comb$modelList$burnin)
fit_PY_comb$chains$bFacGibbs = rbind(fit_PY_comb$chains$bFacGibbs, fit_gjamPY1_2$chains$bFacGibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$bgibbs = rbind(fit_PY_comb$chains$bgibbs, fit_gjamPY1_2$chains$bgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$bgibbsUn = rbind(fit_PY_comb$chains$bgibbsUn, fit_gjamPY1_2$chains$bgibbsUn[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$fSensGibbs = rbind(fit_PY_comb$chains$bFacGibbs, fit_gjamPY1_2$chains$bFacGibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$kgibbs = rbind(fit_PY_comb$chains$kgibbs, fit_gjamPY1_2$chains$kgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$sgibbs = rbind(fit_PY_comb$chains$sgibbs, fit_gjamPY1_2$chains$sgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$sigErrGibbs= c(fit_PY_comb$chains$sigErrGibbs, fit_gjamPY1_2$chains$sigErrGibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng])
fit_PY_comb$parameters$betaMu =  (fit_gjamPY1$parameters$betaMu +fit_gjamPY1_2$parameters$betaMu)/2
other_values<- c("other_PC1", "other_PC2","other_I(PC1^2)","other_I(PC2^2)","other_intercept")
chain_beta_1 <- fit_gjamPY1$chains$bgibbs[(fit_gjamPY1$modelList$burnin+1):fit_gjamPY1$modelList$ng,1:(dim(fit_gjamPY1$chains$bgibbs)[2]-5)]
chain_beta_2 <- fit_gjamPY1_2$chains$bgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,1:(dim(fit_gjamPY1$chains$bgibbs)[2]-5)]
beta_chains  = mcmc.list(mcmc(chain_beta_1), mcmc(chain_beta_2))
GR_value_beta =gelman.diag(beta_chains)
summary(GR_value_beta$psrf[,1])
hist(GR_value_beta$psrf[,1])
GR_value_beta$psrf[GR_value_beta$psrf[,1]>1.1,1]
names<- names(GR_value_beta$psrf[GR_value_beta$psrf[,1]>1.1,1])
plots<- list()
for(key in names) {
non_c_chains_1 <- fit_gjamPY1$chains$bgibbs[(fit_gjamPY1$modelList$burnin +1):fit_gjamPY1$modelList$ng,c(key)]
non_c_chains_2 <- fit_gjamPY1_2$chains$bgibbs[(fit_gjamPY1_2$modelList$burnin +1):fit_gjamPY1_2$modelList$ng,c(key)]
non_c_chain  = mcmc.list(mcmc(non_c_chains_1), mcmc(non_c_chains_2))
x =gelman.diag(non_c_chain)
print(x$psrf[1,])
gelman.plot(non_c_chain)
p = tibble(iterations = 1:(fit_gjamPY1_2$modelList$ng - fit_gjamPY1_2$modelList$burnin),
chain_1 =non_c_chains_1,
chain_2 = non_c_chains_2 ) %>%
gather(Chains, trace, chain_1:chain_2)%>%
ggplot(aes(x=iterations,y=trace,col=Chains))+geom_line(alpha=0.5)+ scale_color_viridis(discrete=TRUE)+
xlab("iterations")+ylab("Sigma coeffcient") +theme_bw()
plots<- list.append(plots,p)
}
prow <- plot_grid(
plots[[1]] + theme(legend.position='none'),
plots[[2]]+ theme(legend.position='none'),
nrow = 2)
legend_b <- get_legend(plots[[2]]+theme(legend.position ='top'))
p <- plot_grid(prow, ncol = 1,rel_heights = c(10, 1))
#pdf(file = "Plots/PY1_Rhat_large_beta.pdf", width= 8.27, height = 9.69)
plot(p)
#dev.off()
df_beta<- tibble(ES= effectiveSize(mcmc(rbind(chain_beta_1, chain_beta_2))))
df_beta %>%ggplot(aes(ES))+ geom_histogram( position="identity", alpha=0.5)
save(df_beta, file =  paste0(folderpath,"Conv_beta_PY1.Rdata"))
save(GR_value_beta, file =  paste0(folderpath,"GR_value_beta_PY1.Rdata"))
chain_1 <- fit_gjamPY1$chains$sgibbs[(fit_gjamPY1$modelList$burnin+1):fit_gjamPY1$modelList$ng,]
chain_2 <- fit_gjamPY1_2$chains$sgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,]
chains  = mcmc.list(mcmc(chain_1), mcmc(chain_2))
GR_value =gelman.diag(chains)
save(GR_value, file =  paste0(folderpath,"GR_value_sigma_PY1.Rdata"))
summary(GR_value$psrf[,1])
trace_chain = fit_PY_comb$chains$kgibbs
trace_chain_1 = apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))
trace_chain_2 = apply(fit_gjamPY1_2$chains$kgibbs,1,function(x) length(unique(x)))
df_trace_PY1<- tibble(it= 1: length(apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))),
PY1=trace_chain_1,
PY1_2 = trace_chain_2)
save(df_trace_PY1, file =  paste0(folderpath,"PY1_k_chains.Rdata"))
df_trace_PY1 %>%
gather(Chains, trace, PY1:PY1_2)%>%
ggplot(aes(x=it,y=trace,col=Chains))+geom_line(alpha=0.7)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
pdf(file = "Plots/Trace_plot_partitions.pdf", width= 8.27, height = 9.69)
trace_chain = fit_PY_comb$chains$kgibbs
trace_chain_1 = apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))
trace_chain_2 = apply(fit_gjamPY1_2$chains$kgibbs,1,function(x) length(unique(x)))
df_trace_PY1<- tibble(it= 1: length(apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))),
PY1=trace_chain_1,
PY1_2 = trace_chain_2)
save(df_trace_PY1, file =  paste0(folderpath,"PY1_k_chains.Rdata"))
df_trace_PY1 %>%
gather(Chains, trace, PY1:PY1_2)%>%
ggplot(aes(x=it,y=trace,col=Chains))+geom_line(alpha=0.7)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
dev.off()
sp_num<- ncol(Ydata)-1
K_chain_1 <- fit_gjamPY1$chains$kgibbs[(fit_gjamPY1$modelList$burnin +1):fit_gjamPY1$modelList$ng,]
K_chain_2 <- fit_gjamPY1_2$chains$kgibbs[(fit_gjamPY1_2$modelList$burnin +1):fit_gjamPY1_2$modelList$ng,]
K_chain = rbind(K_chain_1,K_chain_2 )
PY1_clust<- gjamClust_full_test(model= fit_PY_comb)
PY1_clust$VI_loss_value
save(PY1_clust, file =  paste0(folderpath,"Clustering_mcclust_diff_sp_PY1.Rdata"))
PY1_clust<- gjamClust(model= fit_PY_comb)
PY1_clust$VI_est
SW_fin_table_PY1<-tibble(Model="PY1",K=length(unique(PY1_clust$VI_est)),VI_dist = vi.dist(PY1_clust$VI_est, True_clust$K_n), AR_dist = arandi(PY1_clust$VI_est, True_clust$K_n))
SW_fin_table_PY1
save(SW_fin_table_PY1, file =  paste0(folderpath,"SW_tab_PY1.Rdata"))
#save(SW_fin_table_PY1, file =  paste0(folderpath,"SW_tab_PY1.Rdata"))
Cluster_PY1_1<- tibble( CODE_CBNA=colnames(Ydata)[1:(ncol(Ydata)-1)],ClustPY1=PY1_clust$VI_est)
save(Cluster_PY1_1, file =  paste0(folderpath,"Cluster_PY1_1.Rdata"))
PY1_clust2_full<- gjamClust2_full(model= fit_PY_comb)
#save(PY1_clust2_full, file =  paste0(folderpath,"Clustering_gre_diff_sp_PY1.Rdata"))
PY1_clust2_full$EPL_value
PY1_clust2_1<- gjamClust2(model= fit_gjamPY1)
PY1_clust2_2<- gjamClust2(model= fit_gjamPY1_2)
PY1_clust2_1$VI_est
PY1_clust2_1$EPL_value
length(unique(PY1_clust2_1$VI_est))
length(unique(PY1_clust2_2$VI_est))
arandi(PY1_clust2_1$VI_est, PY1_clust2_2$VI_est)
arandi(PY1_clust2_1$VI_est,PY1_clust2_2$VI_est)
arandi(PY1_clust2_2$VI_est, Cluster_models_1$ClustPY1)
load("~/Documents/GitHub/GJAM_clust/PCA_analysis/r5/Clusters_all_2.Rdata")
load("~/Documents/GitHub/GJAM_clust/PCA_analysis/r5/Clusters_modells_2.Rdata")
load("~/Documents/GitHub/GJAM_clust/PCA_analysis/r5/Clusters_modells_1.Rdata"
)
arandi(PY1_clust2_2$VI_est, Cluster_models_1$ClustPY1)
arandi(PY1_clust2_2$VI_est, Cluster_models_2$ClustPY1)
arandi(PY1_clust2_full$VI_est[[3]], Cluster_models_2$ClustPY1)
arandi(PY1_clust2_full$VI_est[[2]], Cluster_models_2$ClustPY1)
arandi(PY1_clust2_full$VI_est[[1]], Cluster_models_2$ClustPY1)
sample(1:K,dim(CM_DP)[1],replace = TRUE)
### using true clust initialization
#PY1_clust2 <- gjamClust2(model= fit_PY_comb,  pars =list(decision_init= True_clust$K_n, loss_type="VI"))
PY1_clust2 <- gjamClust2(model= fit_PY_comb,  pars =list(decision_init=sample(1:16,111,replace = TRUE), loss_type="VI"))
PY1_clust2_full$VI_est[[2]]
arandi(PY1_clust2_full$VI_est[[2]], PY1_clust2$VI_est)
PY1_clust2$EPL_value
PY1_clust2_full$EPL_value
PY1_clust2_full<- gjamClust2_full(model= fit_PY_comb)
#save(PY1_clust2_full, file =  paste0(folderpath,"Clustering_gre_diff_sp_PY1.Rdata"))
PY1_clust2_full$EPL_value
PY1_clust2_full<- gjamClust2_full(model= fit_PY_comb)
PY1_clust2_full$VI_est
PY1_clust2_full$EPL_value
save(PY1_clust2_full, file =  paste0(folderpath,"Clustering_gre_diff_sp_PY1.Rdata"))
### using true clust initialization
PY1_clust2 <- gjamClust2(model= fit_PY_comb,  pars =list(decision_init= True_clust$K_n, loss_type="VI"))
PY1_clust2$EPL_value
length(unique(PY1_clust2_full$VI_est[[1]]))
length(unique(PY1_clust2_full$VI_est[[2]]))
length(unique(PY1_clust2_full$VI_est[[3]]))
#PY1_clust2_1<- gjamClust2(model= fit_gjamPY1)
#PY1_clust2_2<- gjamClust2(model= fit_gjamPY1_2)
arandi(PY1_clust2_1$VI_est,PY1_clust2_2$VI_est)
arandi(PY1_clust2_2$VI_est, Cluster_models_1$ClustPY1)
arandi(PY1_clust2_full$VI_est[[1]], Cluster_models_2$ClustPY1)
arandi(PY1_clust2_full$VI_est[[3]], Cluster_models_2$ClustPY1)
arandi(PY1_clust2_full$VI_est[[3]], Cluster_models_1$ClustPY1)
arandi(PY1_clust2_full$VI_est[[2]], Cluster_models_1$ClustPY1)
arandi(PY1_clust2_full$VI_est[[1]], Cluster_models_1$ClustPY1)
arandi(PY1_clust2_full$VI_est[[3]], Cluster_models_1$ClustPY1)
arandi(PY1_clust2_full$VI_est[[3]], PY1_clust2$VI_est)
arandi(PY1_clust2_full$VI_est[[2]], PY1_clust2$VI_est)
arandi(PY1_clust2_full$VI_est[[3]], PY1_clust2$VI_est)
arandi(PY1_clust2_full$VI_est[[1]], PY1_clust2$VI_est)
arandi(PY1_clust2_full$VI_est[[3]], PY1_clust2$VI_est)
arandi(PY1_clust2_full$VI_est[[3]], Clusters_all_2$)
arandi(PY1_clust2_full$VI_est[[3]], Clusters_all_2$ClustDP1)
Clusters_all_2$CBN <- as.numeric(Clusters_all_2$CODE_CBNA)
Clusters_all_2_sorted= Clusters_all_2[order(Clusters_all_2$CBN),]
arandi(PY1_clust2_full$VI_est[[3]], Clusters_all_2_sorted$ClustDP1)
GRE_fin_table_PY1<-tibble(Model="PY1",K=length(unique(PY1_clust2$VI_est)),VI_dist = vi.dist(PY1_clust2$VI_est, True_clust$K_n), AR_dist = arandi(PY1_clust2$VI_est, True_clust$K_n))
GRE_fin_table_PY1
AR_dist = arandi(PY1_clust2_full$VI_est[[3]], True_clust$K_n)
arandi(PY1_clust2_full$VI_est[[3]], True_clust$K_n)
### using true clust initialization
PY1_clust2 <- gjamClust2(model= fit_PY_comb,  pars =list(decision_init= True_clust$K_n, loss_type="VI"))
PY1_clust2$VI_est
PY1_clust2$EPL_value
arandi(PY1_clust2_full$VI_est[[2]], PY1_clust2$VI_est)
arandi(PY1_clust2_full$VI_est[[3]], PY1_clust2$VI_est)
save(PY1_clust2, file =  paste0(folderpath,"Clustering__PY1_v1.Rdata"))
GRE_fin_table_PY1<-tibble(Model="PY1",K=length(unique(PY1_clust2$VI_est)),VI_dist = vi.dist(PY1_clust2$VI_est, True_clust$K_n), AR_dist = arandi(PY1_clust2$VI_est, True_clust$K_n))
GRE_fin_table_PY1
save(GRE_fin_table_PY1, file =  paste0(folderpath,"GRE_tab_PY1.Rdata"))
#save(GRE_fin_table_PY1, file =  paste0(folderpath,"GRE_tab_PY1.Rdata"))
Cluster_PY1_2<- tibble( CODE_CBNA=colnames(Ydata)[1:(ncol(Ydata)-1)],ClustPY1=PY1_clust2$VI_est)
#save(GRE_fin_table_PY1, file =  paste0(folderpath,"GRE_tab_PY1.Rdata"))
#Cluster_PY1_2<- tibble( CODE_CBNA=colnames(Ydata)[1:(ncol(Ydata)-1)],ClustPY1=PY1_clust2$VI_est)
save(Cluster_PY1_2, file =  paste0(folderpath,"Cluster_PY1_2.Rdata"))
Colnames_Y_clust<- merge(Colnames_Y, Cluster_PY1_2, by ="CODE_CBNA")
MDP= (fit_gjamPY1$parameters$corMu + fit_gjamPY1_2$parameters$corMu)/2
Colnames_Y_clust$Sp_name_PY <- paste(Colnames_Y_clust$ClustPY1, Colnames_Y_clust$species,sep="_")
rownames(MDP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_PY"],"other")
colnames(MDP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_PY"],"other")
colors_vir=viridis(length(unique(Colnames_Y_clust$ClustPY1))+1, option = "magma")
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_PY),"ClustPY1"],length(unique(Colnames_Y_clust$ClustPY1))+1), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(MDP, diag = FALSE, order = "hclust", tl.cex = 0.45,tl.srt=45, method = "color", tl.col=LabelCol,col=cols(200),
type = "full", title= "Correlation for the PY model (original)", mar=c(0,0,1,0))
corrplot(MDP, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "full",title= "Correlation for the PY model (PY groups)", mar=c(0,0,1,0))
#dev.off()
pdf(file = "Plots/Correlation_matrix_PY.pdf", width= 8.27, height = 9.69)
MDP= (fit_gjamPY1$parameters$corMu + fit_gjamPY1_2$parameters$corMu)/2
Colnames_Y_clust$Sp_name_PY <- paste(Colnames_Y_clust$ClustPY1, Colnames_Y_clust$species,sep="_")
rownames(MDP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_PY"],"other")
colnames(MDP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_PY"],"other")
colors_vir=viridis(length(unique(Colnames_Y_clust$ClustPY1))+1, option = "magma")
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_PY),"ClustPY1"],length(unique(Colnames_Y_clust$ClustPY1))+1), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(MDP, diag = FALSE, order = "hclust", tl.cex = 0.45,tl.srt=45, method = "color", tl.col=LabelCol,col=cols(200),
type = "full", title= "Correlation for the PY model (original)", mar=c(0,0,1,0))
corrplot(MDP, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "full",title= "Correlation for the PY model (PY groups)", mar=c(0,0,1,0))
dev.off()
form<-c(formula)
Fin_tab_PY<-as.data.frame(matrix(NA,nrow=10,ncol=6))
names(Fin_tab_PY)<- c("Parameter","PY","r", "iter", "burn","formula")
Fin_tab_PY$iter<- fit_gjamPY1$modelList$ng
Fin_tab_PY$burn<- fit_gjamPY1$modelList$burnin
Fin_tab_PY$r<-fit_gjamPY1$modelList$reductList$r
Fin_tab_PY$formula<-as.character(form)
Fin_tab_PY[1,1]<- "DIC"
Fin_tab_PY[1,2]<- fit_gjamPY1$fit$DIC/10000
Fin_tab_PY[2,1]<- "mean AUC"
Fin_tab_PY[2,2]<- mean(gjamPY$AUC_out)
Fin_tab_PY[3,1]<- "AUC in"
Fin_tab_PY[3,2]<- mean(gjamPY$AUC_in)
Fin_tab_PY[4,1]<- "AR dist VI loss 1"
Fin_tab_PY[4,2]<- SW_fin_table_PY1$AR_dist
Fin_tab_PY[5,1]<- "VI dist VI loss"
Fin_tab_PY[5,2]<- SW_fin_table_PY1$VI_dist
Fin_tab_PY[6,1]<- "AR dist VI loss 2"
Fin_tab_PY[6,2]<- GRE_fin_table_PY1$AR_dist
Fin_tab_PY[7,1]<- "VI dist VI loss 2"
Fin_tab_PY[7,2]<- GRE_fin_table_PY1$VI_dist
Fin_tab_PY[8,1]<- "mean K"
Fin_tab_PY[8,2]<- mean(apply(fit_PY_comb$chains$kgibbs,1,function(x) length(unique(x)))[fit_PY_comb$modelList$burnin:fit_PY_comb$modelList$ng])
Fin_tab_PY[9,1]<- "K VI"
Fin_tab_PY[9,2]<- SW_fin_table_PY1$K
Fin_tab_PY[10,1]<- "K VI2"
Fin_tab_PY[10,2]<- GRE_fin_table_PY1$K
Fin_tab_PY[,2]<- round(Fin_tab_PY[,2], 3)
Fin_tab_PY
save(Fin_tab_PY, file = paste0(folderpath,"Fin_tabPY_r5.Rdata"))
write.csv(Fin_all, file = "Final_tablePY1.csv")
write.csv(Fin_tab_PY, file = "Final_tablePY1.csv")
df_beta_DP1<- load_object("PCA_analysis/r5/Conv_beta_DP1.Rdata")
df_beta_PY<- load_object("PCA_analysis/r5/")
df_beta_DP<- load_object("PCA_analysis/r5/")
df_beta_DP1<- load_object("PCA_analysis/r5/Conv_beta_DP1.Rdata")
df_beta_PY<- load_object("PCA_analysis/r5/Conv_beta_PY1.Rdata")
df_sigma_DP1<- load_object("PCA_analysis/r5/Conv_sigma_DP1.Rdata")
df_sigma_PY<- load_object("PCA_analysis/r5/Conv_sigma_PY1.Rdata")
df_sigma_DP<- load_object("PCA_analysis/r5/Conv_sigma_DP.Rdata")
rbind(df_sigma_DP %>% mutate(Model = "DP"),
df_sigma_DP1 %>%  mutate(Model = "DP1"),
df_sigma_PY %>% mutate(Model = "PY")
) %>%
ggplot(aes(ES, color = Model, fill = Model))+ geom_histogram( position="identity",alpha=0.3, bins=50)
GR_sigma_PY<- load_object("PCA_analysis/r5/GR_value_sigma_PY1.Rdata")
GR_beta_DP1<- load_object("PCA_analysis/r5/GR_value_beta_PY1.Rdata")
DP1_k_trace<- load_object("PCA_analysis/r5/DP1_k_chains.Rdata")
DP_k_trace<- load_object("PCA_analysis/r5/DP_k_chains.Rdata")
PY_k_trace<- load_object("PCA_analysis/r5/PY1_k_chains.Rdata")
df<-cbind(DP_k_trace,DP1_k_trace[,2:3],PY_k_trace[,2:3] )
df%>% gather(Model, trace, DP_1:PY1_2)%>%
ggplot(aes(x=it,y=trace,col=Model))+geom_line(alpha=0.7)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
DP_pred<- load_object("PCA_analysis/r5/DP_prediction.Rdata")
DP1_pred<- load_object("PCA_analysis/r5/DP1_prediction.Rdata")
PY_pred<- load_object("PCA_analysis/r5/PY1_prediction.Rdata")
AUC_data<- tibble(DP=DP_pred$AUC_out, DP1=DP1_pred$AUC_out, PY= PY_pred$AUC_out)
AUC_data_in<-  tibble(DP=DP_pred$AUC_in, DP1=DP1_pred$AUC_in, PY= PY_pred$AUC_in)
AUC_data$species<- colnames(Ydata_test)[1:ncol(Ydata_test)]
AUC_fin<- melt(AUC_data)
p2<-ggplot(data=AUC_fin)+geom_boxplot(aes(y=as.numeric(value),x=as.factor(variable),fill=as.factor(variable)))+
scale_y_continuous(name="AUC")+
scale_fill_discrete(name = "Models", labels = c("GJAM","GJAM1","PY1"))+xlab("Models")+ theme_bw()
p2
AUC_fin_in_table<- as.data.frame(t(apply(AUC_data_in,2,mean)))
AUC_fin_table<- as.data.frame(t(apply(AUC_data[,1:3],2,mean)))
WAUC_fin_table<- as.data.frame(t(apply(AUC_data[,1:3],2,function(x) sum(x*p_w))))
names(AUC_fin_table)<- c("DP","DP1","PY")
kable(cbind(data.frame( Measure = rbind("AUC")), rbind(AUC_fin_table)), format="pandoc", caption= "Prediction")
Pred_tab <-as.data.frame( rbind(cbind(data.frame( Measure = rbind("AUC_out")), rbind(AUC_fin_table)),
cbind(data.frame( Measure = rbind("AUC_in")), rbind(AUC_fin_in_table))))
DP_clust_tab_SW <- load_object("PCA_analysis/r5/SW_tab_DP.Rdata")
DP1_clust_tab_SW <- load_object("PCA_analysis/r5/SW_tab_DP1.Rdata")
PY_clust_tab_SW <- load_object("PCA_analysis/r5/SW_tab_PY1.Rdata")
SW_tab<- rbind(DP_clust_tab_SW,DP1_clust_tab_SW,PY_clust_tab_SW)
SW_tab
DP1_clust_tab_GRE <- load_object("PCA_analysis/r5/GRE_tab_DP1.Rdata")
DP_clust_tab_GRE <- load_object("PCA_analysis/r5/GRE_tab_DP.Rdata")
PY_clust_tab_GRE <- load_object("PCA_analysis/r5/GRE_tab_PY1.Rdata")
GRE_tab<- rbind(DP1_clust_tab_GRE,DP_clust_tab_GRE,PY_clust_tab_GRE)
GRE_tab
DP1_clust_tab_GRE <- load_object("PCA_analysis/r5/GRE_tab_DP1.Rdata")
DP1_clust_tab_GRE$Model<- "DP1"
DP_clust_tab_GRE <- load_object("PCA_analysis/r5/GRE_tab_DP.Rdata")
PY_clust_tab_GRE <- load_object("PCA_analysis/r5/GRE_tab_PY1.Rdata")
GRE_tab<- rbind(DP1_clust_tab_GRE,DP_clust_tab_GRE,PY_clust_tab_GRE)
GRE_tab
load("PCA_analysis/r5/Cluster_DP1_1.Rdata")
load("PCA_analysis/r5/Cluster_DP1_2.Rdata")
load("PCA_analysis/r5/Cluster_PY1_1.Rdata")
load("PCA_analysis/r5/Cluster_PY1_2.Rdata")
load("PCA_analysis/r5/Cluster_DP_2.Rdata")
load("PCA_analysis/r5/Cluster_DP_1.Rdata")
Clusters_all_1<- merge(Cluster_DP1_1, Cluster_DP_1, by = c("CODE_CBNA"))
Clusters_all_1<- merge(Clusters_all_1, Cluster_PY1_1,  by = c("CODE_CBNA"))
Clusters_all_1<- merge(Clusters_all_1, True_clust[, c("CODE_CBNA", "PFG", "K_n")], by = c("CODE_CBNA"))
Clusters_all_2<- merge(Cluster_DP1_2, Cluster_DP_2, by = c("CODE_CBNA"))
Clusters_all_2<- merge(Clusters_all_2, Cluster_PY1_2,  by = c("CODE_CBNA"))
Clusters_all_2<- merge(Clusters_all_2, True_clust[, c("CODE_CBNA", "PFG", "K_n")], by = c("CODE_CBNA"))
load("PCA_analysis/r5/Cluster_DP1_1.Rdata")
Clusters_all_2$CBN <- as.numeric(Clusters_all_2$CODE_CBNA)
M= Clusters_all_1[order(Clusters_all_1$CBN),]
B= Clusters_all_2[order(Clusters_all_2$CBN),]
arandi(All_clusters$DP1, c1)
arandi(All_clusters$DP1, c2)
arandi(All_clusters$PY2, c1)
arandi(All_clusters$PY2, c2)
load("PCA_analysis/r5/Cluster_DP1_1.Rdata")
Clusters_all_2$CBN <- as.numeric(Clusters_all_2$CODE_CBNA)
M= Clusters_all_1[order(Clusters_all_1$CBN),]
Clusters_all_1
head(Clusters_all_1)
Clusters_all_1$CBN <- as.numeric(Clusters_all_1$CODE_CBNA)
M= Clusters_all_1[order(Clusters_all_1$CBN),]
B= Clusters_all_2[order(Clusters_all_2$CBN),]
arandi(All_clusters$DP1, c1)
load("PCA_analysis/r5/Cluster_DP1_1.Rdata")
Clusters_all_1$CBN <- as.numeric(Clusters_all_1$CODE_CBNA)
Clusters_all_1_sorted= Clusters_all_1[order(Clusters_all_1$CBN),]
Random_cluster <-  sample(1:16, size = 111, replace = TRUE)
Random_cluster_w <-  sample(1:16, size = 111, replace = TRUE, prob=table(Clusters_all_1_sorted$K_n)/111)
M_all<- data.frame()
Clusters_by_Rand<-cbind(Clusters_all_1_sorted, tibble(RU=Random_cluster), tibble(RW= Random_cluster_w))
Clusters_by_Rand_mat<- Clusters_by_Rand[,c("ClustDP1","ClustDP", "ClustPY1", "K_n", "RU", "RW")]
Mat_dist<- matrix(NA, nrow=6, ncol=6)
for(j in 1:6){
for (k in 1:6){
Mat_dist[j,k]= arandi(Clusters_by_Rand_mat[,j],Clusters_by_Rand_mat[,k])
}
}
M_print<- as.data.frame(round(Mat_dist,3))
colnames(M_print)<- colnames(Clusters_by_Rand_mat)
M_print$Model <- colnames(Clusters_by_Rand_mat)
M_rand<- melt(M_print, id=c("Model"))
M_rand$Model<- factor(M_rand$Model,levels = colnames(M_print)[1:6])
Dist_rand.heatmap <- ggplot(data = M_rand, mapping = aes(x = variable,
y = Model,
fill = value, color='white')) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 2)), size=4)+
scale_fill_gradient(low = 'white', high = 'black', space = 'Lab')+
xlab(label = "AR distance for final cluster with Random clusters ")
Dist_rand.heatmap
pdf(file = "Final_cluster_distances_AR.pdf")
print(Dist_rand.heatmap)
dev.off()
arandi(Clusters_all_2_sorted$ClustDP1, Clusters_all_2_sorted$ClustPY1)
arandi(Clusters_all_1_sorted$ClustDP1, Clusters_all_1_sorted$ClustPY1)
arandi(Clusters_all_2_sorted$ClustDP1, Clusters_all_1_sorted$ClustPY1)
arandi(Clusters_all_1_sorted$ClustDP1, Clusters_all_1_sorted$ClustPY1)
arandi(Clusters_all_1_sorted$ClustPY1, Clusters_all_2_sorted$ClustPY1)
load("PCA_analysis/r5/Cluster_DP1_1.Rdata")
load("PCA_analysis/r5/Cluster_DP1_2.Rdata")
load("PCA_analysis/r5/Cluster_PY1_1.Rdata")
load("PCA_analysis/r5/Cluster_PY1_2.Rdata")
load("PCA_analysis/r5/Cluster_DP_2.Rdata")
load("PCA_analysis/r5/Cluster_DP_1.Rdata")
Clusters_all_1<- merge(Cluster_DP1_1, Cluster_DP_1, by = c("CODE_CBNA"))
Clusters_all_1<- merge(Clusters_all_1, Cluster_PY1_1,  by = c("CODE_CBNA"))
Clusters_all_1<- merge(Clusters_all_1, True_clust[, c("CODE_CBNA", "PFG", "K_n")], by = c("CODE_CBNA"))
arand(Clusters_all_1$ClustPY1, PY1_clust$VI_est)
arandi(Clusters_all_1$ClustPY1, PY1_clust$VI_est)
arandi(Clusters_all_1$ClustPY1[order(as.numeric((Clusters_all_1$CODE_CBNA)))], PY1_clust$VI_est)
arandi(Clusters_all_2$ClustPY1[order(as.numeric((Clusters_all_1$CODE_CBNA)))], PY1_clust2$VI_est)
folderpath
load("~/Documents/GitHub/GJAM_clust/PCA_analysis/r_wp/fit_gjamDP1.Rdata")
mean(apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))))
plot(1:80000, apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x)))))
plot(1:80000, apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))))))
plot(1:80000, apply(fit_gjamDP1$chains$kgibbs,1,function(x) length(unique(x))))
