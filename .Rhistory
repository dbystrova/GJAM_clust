Cor_DP<- list.append(Cor_DP, cor(gjamDP_1$AUC_out, gjamDP_2$AUC_out), cor(gjamDP_1$AUC_in, gjamDP_2$AUC_in))
#save(Cor_DP, file =  paste0(folderpath,"CorDP_prediction.Rdata"))
trace_chain = fit_DP_comb$chains$kgibbs
trace_chain_1 = apply(fit_gjamDP$chains$kgibbs,1,function(x) length(unique(x)))
trace_chain_2 = apply(fit_gjamDP_2$chains$kgibbs,1,function(x) length(unique(x)))
df_trace_DP<- tibble(it= 1: length(apply(fit_gjamDP$chains$kgibbs,1,function(x) length(unique(x)))),
DP_1=trace_chain_1,
DP_2 = trace_chain_2)
df_trace_DP %>%
gather(Chains, trace, DP_1:DP_2)%>%
ggplot(aes(x=it,y=trace,col=Chains))+geom_line(alpha=0.7)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
sp_num<- ncol(Ydata)-1
K_chain_1 <- fit_gjamDP$chains$kgibbs[(fit_gjamDP$modelList$burnin +1):fit_gjamDP$modelList$ng,]
K_chain_2 <- fit_gjamDP_2$chains$kgibbs[(fit_gjamDP_2$modelList$burnin +1):fit_gjamDP_2$modelList$ng,]
K_chain = rbind(K_chain_1,K_chain_2 )
DP_clust_full<- gjamClust_full_test(model= fit_DP_comb)
#save(Cluster_DP_2, file =  paste0(folderpath,"Cluster_DP_2.Rdata"))
Cluster_DP_2<- load_object( paste0(folderpath,"Cluster_DP_2.Rdata"))
Cluster_DP_2
K_chain <- apply(fit_DP_comb$chains$kgibbs[(fit_DP_comb$modelList$burnin +1):fit_DP_comb$modelList$ng,],1,function(x) length(unique(x)))
prob_clustDP<-vector("numeric", length = 112)
p_ks <-table(K_chain)
prob_clustDP[as.numeric(c(names(p_ks)))]<- p_ks/sum(p_ks)
prob_clustDP[-as.numeric(c(names(p_ks)))]<- 0
plot(1:112,prob_clustDP, col="red", type="l")
#save(prob_clustDP, file="DP_post_clust.Rdata")
##################################Covariance matrix######################################################################
#### Add cluster labels
Colnames_Y_clust<- merge(Colnames_Y, Cluster_DP_2, by ="CODE_CBNA")
MDP= (fit_gjamDP$parameters$corMu + fit_gjamDP_2$parameters$corMu)/2
cor_matrix_DP = MDP[1:111,1:111]
for (i in 1:111){
if (Colnames_Y_clust$ClustDP[i] > 9){
Colnames_Y_clust$Sp_name_DP[i] <- paste("Group",Colnames_Y_clust$ClustDP[i], Colnames_Y_clust$species[i],sep=":")
}
else{
Colnames_Y_clust$Sp_name_DP[i] <- paste(" Group",Colnames_Y_clust$ClustDP[i], Colnames_Y_clust$species[i],sep=":")
}
}
#Colnames_Y_clust$Sp_name_DP1 <- paste("Group",Colnames_Y_clust$ClustDP1, Colnames_Y_clust$species,sep=":")
rownames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP1"])
colnames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP1"])
colors_vir=viridis(length(unique(Colnames_Y_clust$ClustDP)), option = "magma")
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_DP1),"ClustDP"],length(unique(Colnames_Y_clust$ClustDP))), function(x) colors_vir[x])
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_DP),"ClustDP"],length(unique(Colnames_Y_clust$ClustDP))), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(cor_matrix_DP, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "lower",title= "Residual correlation matrix for DPc model", mar=c(0,0,1,0))
MDP= (fit_gjamDP$parameters$corMu + fit_gjamDP_2$parameters$corMu)/2
cor_matrix_DP = MDP[1:111,1:111]
for (i in 1:111){
if (Colnames_Y_clust$ClustDP[i] > 9){
Colnames_Y_clust$Sp_name_DP[i] <- paste("Group",Colnames_Y_clust$ClustDP[i], Colnames_Y_clust$species[i],sep=":")
}
else{
Colnames_Y_clust$Sp_name_DP[i] <- paste(" Group",Colnames_Y_clust$ClustDP[i], Colnames_Y_clust$species[i],sep=":")
}
}
#Colnames_Y_clust$Sp_name_DP1 <- paste("Group",Colnames_Y_clust$ClustDP1, Colnames_Y_clust$species,sep=":")
rownames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP1"])
colnames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP1"])
colors_vir=viridis(length(unique(Colnames_Y_clust$ClustDP)), option = "magma")
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_DP),"ClustDP"],length(unique(Colnames_Y_clust$ClustDP))), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(cor_matrix_DP, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "lower",title= "Residual correlation matrix for DPc model", mar=c(0,0,1,0))
dim(cor_matrix_DP)
LabelCol
rownames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP"])
colnames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP"])
colors_vir=viridis(length(unique(Colnames_Y_clust$ClustDP)), option = "magma")
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_DP),"ClustDP"],length(unique(Colnames_Y_clust$ClustDP))), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(cor_matrix_DP, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "lower",title= "Residual correlation matrix for DPc model", mar=c(0,0,1,0))
pdf(file = "Plots/Correlation_matrix_DP.pdf", width= 8.27, height = 9.69)
MDP= (fit_gjamDP$parameters$corMu + fit_gjamDP_2$parameters$corMu)/2
cor_matrix_DP = MDP[1:111,1:111]
for (i in 1:111){
if (Colnames_Y_clust$ClustDP[i] > 9){
Colnames_Y_clust$Sp_name_DP[i] <- paste("Group",Colnames_Y_clust$ClustDP[i], Colnames_Y_clust$species[i],sep=":")
}
else{
Colnames_Y_clust$Sp_name_DP[i] <- paste(" Group",Colnames_Y_clust$ClustDP[i], Colnames_Y_clust$species[i],sep=":")
}
}
#Colnames_Y_clust$Sp_name_DP1 <- paste("Group",Colnames_Y_clust$ClustDP1, Colnames_Y_clust$species,sep=":")
rownames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP"])
colnames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP"])
colors_vir=viridis(length(unique(Colnames_Y_clust$ClustDP)), option = "magma")
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_DP),"ClustDP"],length(unique(Colnames_Y_clust$ClustDP))), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(cor_matrix_DP, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "lower",title= "Residual correlation matrix for DPc model", mar=c(0,0,1,0))
dev.off()
pdf(file = "Plots/Correlation_matrix_DP.pdf", width= 8.27, height = 9.69)
MDP= (fit_gjamDP$parameters$corMu + fit_gjamDP_2$parameters$corMu)/2
cor_matrix_DP = MDP[1:111,1:111]
for (i in 1:111){
if (Colnames_Y_clust$ClustDP[i] > 9){
Colnames_Y_clust$Sp_name_DP[i] <- paste("Group",Colnames_Y_clust$ClustDP[i], Colnames_Y_clust$species[i],sep=":")
}
else{
Colnames_Y_clust$Sp_name_DP[i] <- paste(" Group",Colnames_Y_clust$ClustDP[i], Colnames_Y_clust$species[i],sep=":")
}
}
#Colnames_Y_clust$Sp_name_DP1 <- paste("Group",Colnames_Y_clust$ClustDP1, Colnames_Y_clust$species,sep=":")
rownames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP"])
colnames(cor_matrix_DP)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_DP"])
colors_vir=viridis(length(unique(Colnames_Y_clust$ClustDP)), option = "magma")
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_DP),"ClustDP"],length(unique(Colnames_Y_clust$ClustDP))), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(cor_matrix_DP, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "lower",title= "", mar=c(0,0,1,0))
dev.off()
rm(list=ls())
setwd("~/Documents/GitHub/GJAM_clust")
setwd("~/Documents/GitHub/GJAM_clust")
library(repmis)
library(gjam)
library(MASS)
library(truncnorm)
library(coda)
library(RcppArmadillo)
library(arm)
library(Rcpp)
library(ggplot2)
library(AUC)
library(rlist)
library(formattable)
library(mcclust.ext)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(grid)
library(factoextra)
library(Hmsc)
library(knitr)
library(tidyverse)
library(corrplot)
library(latex2exp)
library(cowplot)
library(rootSolve)
library(FactoMineR)
library(ggsci)
library(viridis)
library(rlist)
library(latex2exp)
library(GreedyEPL)
Rcpp::sourceCpp('src/cppFns.cpp')
source("R/gjamHfunctions.R")
source("R/gjam.R")
source("BNP_functions.R")
source('analysis/analysis_functions.R')
load_object <- function(file) {
tmp <- new.env()
load(file = file, envir = tmp)
tmp[[ls(tmp)[1]]]
}
##### PCA data
set.seed(123)
PA_pdata<- load_object("Bauges_dataset/PA_data_clean_PCA.RData")
#Bauges_plant<- cbind(PA_pdata$PC1,PA_pdata$PC2, PA_pdata[,7:(ncol(PA_pdata)-2)])
#names(Bauges_plant) = c("PC1", "PC2", names(PA_pdata[,7:(ncol(PA_pdata)-2)]))
#save(Bauges_plant, file = "Bauges_plant.Rdata")
train_ind <- load_object( "Bauges_dataset/PCAtrain_ind.Rds")
y<- PA_pdata[,7:(ncol(PA_pdata)-2)]
Ydata<- gjamTrimY(y,20)$y
xdata_train <- PA_pdata[train_ind, (ncol(PA_pdata)-1):(ncol(PA_pdata))]
xdata_test <- PA_pdata[-train_ind, (ncol(PA_pdata)-1):(ncol(PA_pdata))]
Ydata_train<- Ydata[train_ind,]
Ydata_test<- Ydata[-train_ind,]
S<- ncol(Ydata_train)
S_prev <- colSums(Ydata, na.rm = TRUE, dims = 1)
p_w<- S_prev[1:(length(S_prev))]/sum(S_prev[1:(length(S_prev))])
Colnames_Y<- tibble(CN = 1:112, CODE_CBNA=colnames(Ydata))
K_prior=16
r_reduct = 5
folderpath="PCA_analysis/r5/PY_analysis/"
folderpath2="PCA_analysis/r5_2/"
folderpath3="PCA_analysis/r5_3/"
folderpath4="PCA_analysis/r5_4/"
folderpath5="PCA_analysis/test/"
folderpath6="PCA_analysis/test_2/"
Species_names_groups<- read.csv("Bauges/PFG_Bauges_Description_2017.csv", sep="\t")
true_names<- as.data.frame(names(table(Species_names_groups$PFG)))
names(true_names)<- c("PFG")
true_names$K_n<- 1:16
Species_names_groups_num<- merge(Species_names_groups,true_names, by="PFG" )
#Species_names_groups_num
True_clustering<- tibble( CODE_CBNA =  colnames(Ydata)[1: (ncol(Ydata))])
True_clust<- merge(Species_names_groups_num,True_clustering, by="CODE_CBNA")
Colnames_Y<- merge(Colnames_Y,Species_names_groups_num [,c(2,3,5)], by ="CODE_CBNA" )
Colnames_Y$species<- as.character(Colnames_Y$species)
Colnames_Y$species<- strtrim(Colnames_Y$species, 20)
#Colnames_Y$species<- strtrim(Colnames_Y$species, 20)
Colnames_Y$species <- ifelse(is.na(word(Colnames_Y$species, 1, 2)), Colnames_Y$species, word(Colnames_Y$species, 1, 2))
Colnames_Y<- tibble(CN = 1:112, CODE_CBNA=colnames(Ydata))
Colnames_Y<- merge(Colnames_Y,Species_names_groups_num [,c(2,3,5)], by ="CODE_CBNA" )
Colnames_Y$species<- as.character(Colnames_Y$species)
#Colnames_Y$species<- strtrim(Colnames_Y$species, 20)
Colnames_Y$species <- ifelse(is.na(word(Colnames_Y$species, 1, 2)), Colnames_Y$species, word(Colnames_Y$species, 1, 2))
## Load models 1st run
fit_gjamPY1<- load_object(paste0(folderpath5,"fit_gjamPY1.Rdata"))
## Load models 2nd run
fit_gjamPY1_2<- load_object(paste0(folderpath6,"fit_gjamPY1.Rdata"))
#### Model parameters
PY_par_list_1<- fit_gjamPY1$modelList$reductList
PY_par_list_2<- fit_gjamPY1_2$modelList$reductList
PY_pars<- list(PY_par_list_1,PY_par_list_2)
#Prediction out-of sample on xtest
new_out <- list(xdata =xdata_test,  nsim = 1000) # effort unchanged
#Prediction in-sample
new_in <- list(xdata =xdata_train,  nsim = 1000) # effort unchanged
#Conditional prediction
model_prediction_summary<- function(model, list_out_s,list_in_s , Ytest=Ydata_test, Ytrain=Ydata_train, pw=p_w){
pred_out_s <- gjamPredict(output = model, newdata = list_out_s)
#save(predict_gjam, file = paste0(folderpath,"predict_gjam.Rdata"))
AUC_ous<-vector()
for(i in 1:ncol(Ytest)){
label<- is.na(Ytest[,i])
predict<- pred_out_s$sdList$yMu[!label,i]
test_value<- Ytest[!label,i]
if(sum(test_value)>0){
AUC_ous<-c(AUC_ous,auc(AUC::roc(predict,factor(test_value))))
}
}
pred_in_s <- gjamPredict(output = model, newdata = list_in_s)
AUC_GJAMDin<-vector()
for(i in 1:ncol(Ytrain)){
label<- is.na(Ytrain[,i])
predict<- pred_in_s$sdList$yMu[!label,i]
test_value<- Ytrain[!label,i]
if(sum(test_value)>0){
AUC_GJAMDin<-c(AUC_GJAMDin,auc(roc(predict,factor(test_value))))
}
}
return(list(AUC_out=AUC_ous,AUC_in=AUC_GJAMDin, WAUC= AUC_ous*pw))
}
### Two chains combined
fit_PY_comb =fit_gjamPY1
fit_PY_comb$modelList$ng=fit_PY_comb$modelList$ng + (fit_PY_comb$modelList$ng - fit_PY_comb$modelList$burnin)
fit_PY_comb$chains$bFacGibbs = rbind(fit_PY_comb$chains$bFacGibbs, fit_gjamPY1_2$chains$bFacGibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$bgibbs = rbind(fit_PY_comb$chains$bgibbs, fit_gjamPY1_2$chains$bgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$bgibbsUn = rbind(fit_PY_comb$chains$bgibbsUn, fit_gjamPY1_2$chains$bgibbsUn[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$fSensGibbs = rbind(fit_PY_comb$chains$bFacGibbs, fit_gjamPY1_2$chains$bFacGibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$kgibbs = rbind(fit_PY_comb$chains$kgibbs, fit_gjamPY1_2$chains$kgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$sgibbs = rbind(fit_PY_comb$chains$sgibbs, fit_gjamPY1_2$chains$sgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,])
fit_PY_comb$chains$sigErrGibbs= c(fit_PY_comb$chains$sigErrGibbs, fit_gjamPY1_2$chains$sigErrGibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng])
fit_PY_comb$parameters$betaMu =  (fit_gjamPY1$parameters$betaMu +fit_gjamPY1_2$parameters$betaMu)/2
gjamPY<- model_prediction_summary(model=fit_PY_comb, list_out_s=new_out,list_in_s=new_in, Ytest=Ydata_test, Ytrain=Ydata_train)
#save(gjamPY, file =  paste0(folderpath,"PY1_prediction.Rdata"))
gjamPY1<- model_prediction_summary(model=fit_gjamPY1, list_out_s=new_out,list_in_s=new_in, Ytest=Ydata_test, Ytrain=Ydata_train)
gjamPY1_2<- model_prediction_summary(model=fit_gjamPY1_2, list_out_s=new_out,list_in_s=new_in, Ytest=Ydata_test, Ytrain=Ydata_train)
##Correlation list
Cor_PY1<- list()
#Convergence of parameters
Cor_PY1<- list.append(Cor_PY1, cor(gjamPY1$AUC_out, gjamPY1_2$AUC_out), cor(gjamPY1$AUC_in, gjamPY1_2$AUC_in))
#save(Cor_PY1, file =  paste0(folderpath,"CorPY1_prediction.Rdata"))
chain_1 <- fit_gjamPY1$chains$sgibbs[(fit_gjamPY1$modelList$burnin+1):fit_gjamPY1$modelList$ng,]
chain_2 <- fit_gjamPY1_2$chains$sgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,]
chains  = mcmc.list(mcmc(chain_1), mcmc(chain_2))
GR_value =gelman.diag(chains)
#save(GR_value, file =  paste0(folderpath,"GR_value_sigma_PY1.Rdata"))
summary(GR_value$psrf[,1])
hist(GR_value$psrf[,1])
GR_value$psrf[GR_value$psrf[,1]>1.1,1]
names<- names(GR_value$psrf[GR_value$psrf[,1]>1.1,1])
##### Ploting chains with large psf
plots<- list()
ESS <- list()
for(key in names) {
non_c_chains_1 <- fit_gjamPY1$chains$sgibbs[(fit_gjamPY1$modelList$burnin +1):fit_gjamPY1$modelList$ng,c(key)]
non_c_chains_2 <- fit_gjamPY1_2$chains$sgibbs[(fit_gjamPY1_2$modelList$burnin +1):fit_gjamPY1_2$modelList$ng,c(key)]
non_c_chain  = mcmc.list(mcmc(non_c_chains_1), mcmc(non_c_chains_2))
x =gelman.diag(non_c_chain)
x$psrf[1,]
gelman.plot(non_c_chain)
p = tibble(iterations = 1:(fit_gjamPY1_2$modelList$ng - fit_gjamPY1_2$modelList$burnin),
chain_1 =non_c_chains_1,
chain_2 = non_c_chains_2 ) %>%
gather(Chains, trace, chain_1:chain_2)%>%
ggplot(aes(x=iterations,y=trace,col=Chains))+geom_line(alpha=0.7)+ scale_color_viridis(discrete=TRUE)+
xlab("iterations")+ylab("Sigma coeffcient") +theme_bw()
plots<- list.append(plots,p)
ESS<- list.append(ESS, effectiveSize(mcmc(c(non_c_chains_2,non_c_chains_1))))
}
prow <- plot_grid(
plots[[1]] + theme(legend.position='none'),
plots[[2]]+ theme(legend.position='none'),
plots[[3]]+ theme(legend.position='none'),
plots[[4]]+ theme(legend.position='none'),
nrow = 2, ncol=2)
legend_b <- get_legend(plots[[1]]+theme(legend.position ='top'))
p <- plot_grid(prow, ncol = 1,rel_heights = c(10, 1))
#pdf(file = "Plots/PY1_Rhat_large_sigma.pdf", width= 8.27, height = 9.69)
#plot(p)
#dev.off()
##### Ploting chains with large psf
plots<- list()
ESS <- list()
for(key in names) {
non_c_chains_1 <- fit_gjamPY1$chains$sgibbs[(fit_gjamPY1$modelList$burnin +1):fit_gjamPY1$modelList$ng,c(key)]
non_c_chains_2 <- fit_gjamPY1_2$chains$sgibbs[(fit_gjamPY1_2$modelList$burnin +1):fit_gjamPY1_2$modelList$ng,c(key)]
non_c_chain  = mcmc.list(mcmc(non_c_chains_1), mcmc(non_c_chains_2))
x =gelman.diag(non_c_chain)
x$psrf[1,]
gelman.plot(non_c_chain)
p = tibble(iterations = 1:(fit_gjamPY1_2$modelList$ng - fit_gjamPY1_2$modelList$burnin),
chain_1 =non_c_chains_1,
chain_2 = non_c_chains_2 ) %>%
gather(Chains, trace, chain_1:chain_2)%>%
ggplot(aes(x=iterations,y=trace,col=Chains))+geom_line(alpha=0.7)+ scale_color_viridis(discrete=TRUE)+
xlab("iterations")+ylab("Sigma coeffcient") +theme_bw()
plots<- list.append(plots,p)
ESS<- list.append(ESS, effectiveSize(mcmc(c(non_c_chains_2,non_c_chains_1))))
}
plots
chain_1 <- fit_gjamPY1$chains$sgibbs[(fit_gjamPY1$modelList$burnin+1):fit_gjamPY1$modelList$ng,]
chain_2 <- fit_gjamPY1_2$chains$sgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,]
chains  = mcmc.list(mcmc(chain_1), mcmc(chain_2))
GR_value =gelman.diag(chains)
summary(GR_value$psrf[,1])
hist(GR_value$psrf[,1])
GR_value$psrf[GR_value$psrf[,1]>1.1,1]
names<- names(GR_value$psrf[GR_value$psrf[,1]>1.1,1])
##### Ploting chains with large psf
plots<- list()
ESS <- list()
for(key in names) {
non_c_chains_1 <- fit_gjamPY1$chains$sgibbs[(fit_gjamPY1$modelList$burnin +1):fit_gjamPY1$modelList$ng,c(key)]
non_c_chains_2 <- fit_gjamPY1_2$chains$sgibbs[(fit_gjamPY1_2$modelList$burnin +1):fit_gjamPY1_2$modelList$ng,c(key)]
non_c_chain  = mcmc.list(mcmc(non_c_chains_1), mcmc(non_c_chains_2))
x =gelman.diag(non_c_chain)
x$psrf[1,]
gelman.plot(non_c_chain)
p = tibble(iterations = 1:(fit_gjamPY1_2$modelList$ng - fit_gjamPY1_2$modelList$burnin),
chain_1 =non_c_chains_1,
chain_2 = non_c_chains_2 ) %>%
gather(Chains, trace, chain_1:chain_2)%>%
ggplot(aes(x=iterations,y=trace,col=Chains))+geom_line(alpha=0.7)+ scale_color_viridis(discrete=TRUE)+
xlab("iterations")+ylab("Sigma coeffcient") +theme_bw()
plots<- list.append(plots,p)
ESS<- list.append(ESS, effectiveSize(mcmc(c(non_c_chains_2,non_c_chains_1))))
}
prow <- plot_grid(
plots[[1]] + theme(legend.position='none'),
plots[[2]]+ theme(legend.position='none'),
plots[[3]]+ theme(legend.position='none'),
plots[[4]]+ theme(legend.position='none'),
nrow = 2, ncol=2)
legend_b <- get_legend(plots[[1]]+theme(legend.position ='top'))
p <- plot_grid(prow, ncol = 1,rel_heights = c(10, 1))
df_sigma<- tibble(ES=effectiveSize(mcmc(rbind(chain_1, chain_2))))
df_sigma%>% ggplot(aes(ES, alpha = 0.3))+ geom_histogram( position="identity", alpha=0.2)
#summary(df_sigma)
#min =100
#save(df_sigma, file =  paste0(folderpath,"Conv_sigma_PY1.Rdata"))
###### Convergence for beta coefficients
other_values<- c("other_PC1", "other_PC2","other_I(PC1^2)","other_I(PC2^2)","other_intercept")
chain_beta_1 <- fit_gjamPY1$chains$bgibbs[(fit_gjamPY1$modelList$burnin+1):fit_gjamPY1$modelList$ng,1:(dim(fit_gjamPY1$chains$bgibbs)[2]-5)]
chain_beta_2 <- fit_gjamPY1_2$chains$bgibbs[(fit_gjamPY1_2$modelList$burnin+1):fit_gjamPY1_2$modelList$ng,1:(dim(fit_gjamPY1$chains$bgibbs)[2]-5)]
beta_chains  = mcmc.list(mcmc(chain_beta_1), mcmc(chain_beta_2))
GR_value_beta =gelman.diag(beta_chains)
summary(GR_value_beta$psrf[,1])
hist(GR_value_beta$psrf[,1])
GR_value_beta$psrf[GR_value_beta$psrf[,1]>1.1,1]
names<- names(GR_value_beta$psrf[GR_value_beta$psrf[,1]>1.1,1])
plots<- list()
for(key in names) {
non_c_chains_1 <- fit_gjamPY1$chains$bgibbs[(fit_gjamPY1$modelList$burnin +1):fit_gjamPY1$modelList$ng,c(key)]
non_c_chains_2 <- fit_gjamPY1_2$chains$bgibbs[(fit_gjamPY1_2$modelList$burnin +1):fit_gjamPY1_2$modelList$ng,c(key)]
non_c_chain  = mcmc.list(mcmc(non_c_chains_1), mcmc(non_c_chains_2))
x =gelman.diag(non_c_chain)
print(x$psrf[1,])
gelman.plot(non_c_chain)
p = tibble(iterations = 1:(fit_gjamPY1_2$modelList$ng - fit_gjamPY1_2$modelList$burnin),
chain_1 =non_c_chains_1,
chain_2 = non_c_chains_2 ) %>%
gather(Chains, trace, chain_1:chain_2)%>%
ggplot(aes(x=iterations,y=trace,col=Chains))+geom_line(alpha=0.5)+ scale_color_viridis(discrete=TRUE)+
xlab("iterations")+ylab("Sigma coeffcient") +theme_bw()
plots<- list.append(plots,p)
}
prow <- plot_grid(
plots[[1]] + theme(legend.position='none'),
plots[[2]]+ theme(legend.position='none'),
plots[[3]]+ theme(legend.position='none'),
plots[[4]]+ theme(legend.position='none'),
plots[[5]]+ theme(legend.position='none'),
plots[[6]]+ theme(legend.position='none'),
plots[[7]]+ theme(legend.position='none'),
plots[[8]]+ theme(legend.position='none'),
nrow = 4)
df_beta<- tibble(ES= effectiveSize(mcmc(rbind(chain_beta_1, chain_beta_2))))
df_beta %>%ggplot(aes(ES))+ geom_histogram( position="identity", alpha=0.5)
###########################################################################################################
############################Trace plot##########################################################################
#pdf(file = "Plots/Trace_plot_partitions.pdf", width= 8.27, height = 9.69)
trace_chain = fit_PY_comb$chains$kgibbs
trace_chain_1 = apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))
trace_chain_2 = apply(fit_gjamPY1_2$chains$kgibbs,1,function(x) length(unique(x)))
df_trace_PY1<- tibble(it= 1: length(apply(fit_gjamPY1$chains$kgibbs,1,function(x) length(unique(x)))),
PY1=trace_chain_1,
PY1_2 = trace_chain_2)
df_trace_PY1 %>%
gather(Chains, trace, PY1:PY1_2)%>%
ggplot(aes(x=it,y=trace,col=Chains))+geom_line(alpha=0.7)+ scale_color_viridis(discrete=TRUE)+
labs(title="Traceplots of the posterior of the number of clusters")+xlab("iterations")+ylab("Number of clusters") +theme_bw()+geom_hline(yintercept = 16,color = "red")+
theme(axis.text.x = element_text(angle = 0, hjust = 1,size = 10), strip.text = element_text(size = 15),legend.position = "top", plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 16),
plot.title = element_text(size = 20)) +theme(legend.text=element_text(size=15))
#dev.off()
##################################Clustering #####################################
sp_num<- ncol(Ydata)-1
K_chain_1 <- fit_gjamPY1$chains$kgibbs[(fit_gjamPY1$modelList$burnin +1):fit_gjamPY1$modelList$ng,]
K_chain_2 <- fit_gjamPY1_2$chains$kgibbs[(fit_gjamPY1_2$modelList$burnin +1):fit_gjamPY1_2$modelList$ng,]
K_chain = rbind(K_chain_1,K_chain_2 )
#PY1_clust2$VI_est <- PY1_clust2_full$VI_est[[3]]
#PY1_clust2$EPL_value<- PY1_clust2_full$EPL_value[[3]]
#save(PY1_clust2, file =  paste0(folderpath,"Clustering__PY1_v1.Rdata"))
PY1_clust2<- load_object( paste0(folderpath,"Clustering__PY1_v1.Rdata"))
##################################Covariance matrix######################################################################
#### Add cluster labels
Colnames_Y_clust<- merge(Colnames_Y, Cluster_PY1_2, by ="CODE_CBNA")
Cluster_PY1_2 <- load_object( paste0(folderpath,"Cluster_PY1_2.Rdata"))
##################################Covariance matrix######################################################################
#### Add cluster labels
Colnames_Y_clust<- merge(Colnames_Y, Cluster_PY1_2, by ="CODE_CBNA")
MDP= (fit_gjamPY1$parameters$corMu + fit_gjamPY1_2$parameters$corMu)/2
cor_matrix_PY = MDP[1:111,1:111]
Cluster_PY1_2
MDP= (fit_gjamPY1$parameters$corMu + fit_gjamPY1_2$parameters$corMu)/2
cor_matrix_PY = MDP[1:111,1:111]
for (i in 1:111){
if (Colnames_Y_clust$ClustPY1[i] > 9){
Colnames_Y_clust$Sp_name_PY[i] <- paste("Group",Colnames_Y_clust$ClustPY1[i], Colnames_Y_clust$species[i],sep=":")
}
else{
Colnames_Y_clust$Sp_name_PY[i] <- paste(" Group",Colnames_Y_clust$ClustPY1[i], Colnames_Y_clust$species[i],sep=":")
}
}
#Colnames_Y_clust$Sp_name_DP1 <- paste("Group",Colnames_Y_clust$ClustDP1, Colnames_Y_clust$species,sep=":")
rownames(cor_matrix_PY)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_PY"])
colnames(cor_matrix_PY)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_PY"])
colors_vir=viridis(length(unique(Colnames_Y_clust$ClustPY1)), option = "magma")
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_PY),"v"],length(unique(Colnames_Y_clust$ClustPY1))), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(cor_matrix_PY, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "lower",title= "", mar=c(0,0,1,0))
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_PY),"ClustDP1"],length(unique(Colnames_Y_clust$ClustPY1))), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(cor_matrix_PY, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "lower",title= "", mar=c(0,0,1,0))
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_PY),"ClustPY1"],length(unique(Colnames_Y_clust$ClustPY1))), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(cor_matrix_PY, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "lower",title= "", mar=c(0,0,1,0))
pdf(file = "Plots/Correlation_matrix_PY.pdf", width= 8.27, height = 9.69)
MDP= (fit_gjamPY1$parameters$corMu + fit_gjamPY1_2$parameters$corMu)/2
cor_matrix_PY = MDP[1:111,1:111]
for (i in 1:111){
if (Colnames_Y_clust$ClustPY1[i] > 9){
Colnames_Y_clust$Sp_name_PY[i] <- paste("Group",Colnames_Y_clust$ClustPY1[i], Colnames_Y_clust$species[i],sep=":")
}
else{
Colnames_Y_clust$Sp_name_PY[i] <- paste(" Group",Colnames_Y_clust$ClustPY1[i], Colnames_Y_clust$species[i],sep=":")
}
}
#Colnames_Y_clust$Sp_name_DP1 <- paste("Group",Colnames_Y_clust$ClustDP1, Colnames_Y_clust$species,sep=":")
rownames(cor_matrix_PY)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_PY"])
colnames(cor_matrix_PY)=c(Colnames_Y_clust[order(Colnames_Y_clust$CN),"Sp_name_PY"])
colors_vir=viridis(length(unique(Colnames_Y_clust$ClustPY1)), option = "magma")
LabelCol = sapply(c(Colnames_Y_clust[order(Colnames_Y_clust$Sp_name_PY),"ClustPY1"],length(unique(Colnames_Y_clust$ClustPY1))), function(x) colors_vir[x])
cols = colorRampPalette(c("dark blue","white","red"))
col2 <- colorRampPalette(c("#4393C3", "#2166AC", "#053061",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#67001F", "#B2182B", "#D6604D", "#F4A582"))
corrplot(cor_matrix_PY, diag = FALSE, order = "alphabet", tl.cex = 0.45,tl.srt=45,  tl.col=LabelCol,
method = "color",col=cols(200), type = "lower",title= "", mar=c(0,0,1,0))
dev.off()
