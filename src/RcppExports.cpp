// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// byRcpp
Rcpp::List byRcpp(const int nr, const arma::mat frommat, arma::mat totmat, arma::mat summat, arma::mat minmat, arma::mat maxmat);
RcppExport SEXP _gjam_byRcpp(SEXP nrSEXP, SEXP frommatSEXP, SEXP totmatSEXP, SEXP summatSEXP, SEXP minmatSEXP, SEXP maxmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type frommat(frommatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type totmat(totmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type summat(summatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type minmat(minmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type maxmat(maxmatSEXP);
    rcpp_result_gen = Rcpp::wrap(byRcpp(nr, frommat, totmat, summat, minmat, maxmat));
    return rcpp_result_gen;
END_RCPP
}
// condMVNRcpp
Rcpp::List condMVNRcpp(const arma::uvec cdex, const arma::uvec gdex, const arma::mat xx, arma::mat mu, const arma::mat sigma);
RcppExport SEXP _gjam_condMVNRcpp(SEXP cdexSEXP, SEXP gdexSEXP, SEXP xxSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec >::type cdex(cdexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type gdex(gdexSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(condMVNRcpp(cdex, gdex, xx, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// tnormRcpp
double tnormRcpp(double lo, double hi, double mu, double sig);
RcppExport SEXP _gjam_tnormRcpp(SEXP loSEXP, SEXP hiSEXP, SEXP muSEXP, SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lo(loSEXP);
    Rcpp::traits::input_parameter< double >::type hi(hiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    rcpp_result_gen = Rcpp::wrap(tnormRcpp(lo, hi, mu, sig));
    return rcpp_result_gen;
END_RCPP
}
// trMVNmatrixRcpp
arma::mat trMVNmatrixRcpp(arma::mat avec, arma::mat muvec, arma::mat smat, arma::mat lo, arma::mat hi, arma::uvec whichSample, arma::uvec idxALL);
RcppExport SEXP _gjam_trMVNmatrixRcpp(SEXP avecSEXP, SEXP muvecSEXP, SEXP smatSEXP, SEXP loSEXP, SEXP hiSEXP, SEXP whichSampleSEXP, SEXP idxALLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type muvec(muvecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type smat(smatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lo(loSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hi(hiSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type whichSample(whichSampleSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idxALL(idxALLSEXP);
    rcpp_result_gen = Rcpp::wrap(trMVNmatrixRcpp(avec, muvec, smat, lo, hi, whichSample, idxALL));
    return rcpp_result_gen;
END_RCPP
}
// rmvnormRcpp
arma::mat rmvnormRcpp(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _gjam_rmvnormRcpp(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnormRcpp(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// solveRcpp
arma::mat solveRcpp(arma::mat A);
RcppExport SEXP _gjam_solveRcpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(solveRcpp(A));
    return rcpp_result_gen;
END_RCPP
}
// getPmatKRcpp
arma::mat getPmatKRcpp(arma::vec pveck, arma::mat Yk, arma::mat Zk, arma::mat Xk, arma::mat Bk, arma::mat Wk, double sigmasqk);
RcppExport SEXP _gjam_getPmatKRcpp(SEXP pveckSEXP, SEXP YkSEXP, SEXP ZkSEXP, SEXP XkSEXP, SEXP BkSEXP, SEXP WkSEXP, SEXP sigmasqkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pveck(pveckSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Yk(YkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zk(ZkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xk(XkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bk(BkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Wk(WkSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasqk(sigmasqkSEXP);
    rcpp_result_gen = Rcpp::wrap(getPmatKRcpp(pveck, Yk, Zk, Xk, Bk, Wk, sigmasqk));
    return rcpp_result_gen;
END_RCPP
}
// fnZRcpp
arma::mat fnZRcpp(arma::vec kk, arma::mat Yk, arma::mat Xk, arma::mat Dk, arma::mat Bk, arma::mat Wk, double sigmasqk, int Nz);
RcppExport SEXP _gjam_fnZRcpp(SEXP kkSEXP, SEXP YkSEXP, SEXP XkSEXP, SEXP DkSEXP, SEXP BkSEXP, SEXP WkSEXP, SEXP sigmasqkSEXP, SEXP NzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Yk(YkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xk(XkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Dk(DkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bk(BkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Wk(WkSEXP);
    Rcpp::traits::input_parameter< double >::type sigmasqk(sigmasqkSEXP);
    Rcpp::traits::input_parameter< int >::type Nz(NzSEXP);
    rcpp_result_gen = Rcpp::wrap(fnZRcpp(kk, Yk, Xk, Dk, Bk, Wk, sigmasqk, Nz));
    return rcpp_result_gen;
END_RCPP
}
// invWbyRcpp
arma::mat invWbyRcpp(double sigsq, arma::mat A);
RcppExport SEXP _gjam_invWbyRcpp(SEXP sigsqSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(invWbyRcpp(sigsq, A));
    return rcpp_result_gen;
END_RCPP
}
// dmvnormRcpp
arma::vec dmvnormRcpp(arma::mat x, arma::mat mean, arma::mat sigma, bool logd);
RcppExport SEXP _gjam_dmvnormRcpp(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnormRcpp(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// randEffRcpp
arma::mat randEffRcpp(arma::mat v, arma::vec ngvec, arma::mat sinv, arma::mat CImat);
RcppExport SEXP _gjam_randEffRcpp(SEXP vSEXP, SEXP ngvecSEXP, SEXP sinvSEXP, SEXP CImatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ngvec(ngvecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sinv(sinvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type CImat(CImatSEXP);
    rcpp_result_gen = Rcpp::wrap(randEffRcpp(v, ngvec, sinv, CImat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gjam_byRcpp", (DL_FUNC) &_gjam_byRcpp, 6},
    {"_gjam_condMVNRcpp", (DL_FUNC) &_gjam_condMVNRcpp, 5},
    {"_gjam_tnormRcpp", (DL_FUNC) &_gjam_tnormRcpp, 4},
    {"_gjam_trMVNmatrixRcpp", (DL_FUNC) &_gjam_trMVNmatrixRcpp, 7},
    {"_gjam_rmvnormRcpp", (DL_FUNC) &_gjam_rmvnormRcpp, 3},
    {"_gjam_solveRcpp", (DL_FUNC) &_gjam_solveRcpp, 1},
    {"_gjam_getPmatKRcpp", (DL_FUNC) &_gjam_getPmatKRcpp, 7},
    {"_gjam_fnZRcpp", (DL_FUNC) &_gjam_fnZRcpp, 8},
    {"_gjam_invWbyRcpp", (DL_FUNC) &_gjam_invWbyRcpp, 2},
    {"_gjam_dmvnormRcpp", (DL_FUNC) &_gjam_dmvnormRcpp, 4},
    {"_gjam_randEffRcpp", (DL_FUNC) &_gjam_randEffRcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_gjam(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
